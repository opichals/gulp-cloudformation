{"version":3,"sources":["js/GulpCloudformation.js"],"names":["range","timer","just","fromNodeCallback","pow","Math","stringify","JSON","GulpCloudformation","extend","_name","_constructor","options","_super","context","describeStacks","createStack","updateStack","validateTemplate","validate","main","TemplateBody","map","catch","err","transform","file","enc","done","isNull","isStream","push","contents","toString","subscribe","deploy","params","_this","path","ext","StackName","acc","doDeploy","value","buffer","Buffer","newFile","upsertStack","flatMap","fetchOutputs","fetchParams","Outputs","OutputKey","OutputValue","scan","Object","assign","hasStack","Stacks","filter","isComplete","OnFailure","delay","x","take","StackStatus","Error","instance","getInstance","exception","init"],"mappings":"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","file":"GulpCloudformation.js","sourcesContent":["//-------------------------------------------------------------------------------\n// Imports\n//-------------------------------------------------------------------------------\n\nimport {\n    Class,\n    Obj,\n    Throwables\n} from 'bugcore';\nimport {obj} from 'through2';\nimport {File, log} from 'gulp-util';\nimport {Observable} from 'rx-lite';\nimport {CloudFormation} from 'aws-sdk';\nimport {basename, extname} from 'path';\n\n\n//-------------------------------------------------------------------------------\n// Simplify References\n//-------------------------------------------------------------------------------\n\nconst {range, timer, just, fromNodeCallback} = Observable;\nconst {pow} = Math;\nconst {stringify} = JSON;\n\n\n//-------------------------------------------------------------------------------\n// Declare Class\n//-------------------------------------------------------------------------------\n\n/**\n * @class\n * @extends {Obj}\n */\nconst GulpCloudformation = Class.extend(Obj, {\n\n    _name: 'gulp.GulpCloudformation',\n\n\n    //-------------------------------------------------------------------------------\n    // Constructor\n    //-------------------------------------------------------------------------------\n\n    /**\n     * @constructs\n     * @param {*} options\n     */\n    _constructor(options) {\n\n        this._super();\n\n\n        //-------------------------------------------------------------------------------\n        // Public Properties\n        //-------------------------------------------------------------------------------\n\n        /**\n         * @private\n         * @type {CloudFormation}\n         */\n        this.context = new CloudFormation(options);\n\n        this.describeStacks = fromNodeCallback(this.context.describeStacks, this.context);\n\n        this.createStack = fromNodeCallback(this.context.createStack, this.context);\n\n        this.updateStack = fromNodeCallback(this.context.updateStack, this.context);\n\n        this.validateTemplate = fromNodeCallback(this.context.validateTemplate, this.context);\n    },\n\n\n    //-------------------------------------------------------------------------------\n    // Public Methods\n    //-------------------------------------------------------------------------------\n\n    validate() {\n        const main = ({TemplateBody}) => {\n            return this.validateTemplate({\n                TemplateBody\n            })\n            .map(log)\n            .catch(err => {\n                log(err);\n                throw err;\n            });\n        };\n\n        function transform(file, enc, done) {\n            if (file.isNull() || file.isStream()) {\n                this.push(file);\n                return done();\n            }\n\n            const {contents} = file;\n            const TemplateBody = contents.toString(enc);\n\n            return main({TemplateBody})\n                .subscribe(\n                    () => {\n                        this.push(file);\n                        return done();\n                    }\n                );\n        }\n\n        return obj(transform);\n    },\n\n    deploy(params = {}) {\n        const _this = this;\n        function transform(file, enc, done) {\n            if (file.isNull() || file.isStream()) {\n                this.push(file);\n                return done();\n            }\n\n            const {path, contents} = file;\n            const ext = extname(path);\n            const StackName = basename(path, ext);\n            const TemplateBody = contents.toString(enc);\n\n            let acc;\n\n            return _this.doDeploy(StackName, TemplateBody, params)\n                .subscribe(\n                    value => acc = value, done,\n                    () => {\n                        const buffer = new Buffer(stringify(acc), enc);\n                        const newFile = new File({...file, contents: buffer});\n                        this.push(newFile);\n                        return done();\n                    }\n                );\n        }\n\n        return obj(transform);\n    },\n\n\n    //-------------------------------------------------------------------------------\n    // Private Methods\n    //-------------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {string} StackName\n     * @param {string} TemplateBody\n     * @param params\n     * @returns {Observable}\n     */\n    doDeploy(StackName, TemplateBody, params) {\n        return this.upsertStack({\n            StackName,\n            TemplateBody,\n            ...params\n        })\n        .map(log)\n        .map(() => ({StackName}))\n        .catch(err => {\n            log(err);\n            return just({StackName});\n        })\n        .flatMap(fetchParams => this.fetchOutputs(fetchParams))\n        .flatMap(({Outputs}) => Outputs)\n        .map(({OutputKey, OutputValue}) => {\n            return {[OutputKey]: OutputValue};\n        })\n        .scan((acc, value) => Object.assign(acc, value), {});\n    },\n\n    hasStack(params) {\n        return this.describeStacks(params)\n            .flatMap(({Stacks}) => Stacks)\n            .filter(this.isComplete)\n            .catch(() => just(false));\n    },\n\n    upsertStack(params) {\n        const {StackName} = params;\n        return this.hasStack({StackName})\n            .flatMap(hasStack => {\n                if (hasStack) {\n                    return this.updateStack(params);\n                }\n\n                return this.createStack({\n                    ...params,\n                    OnFailure: 'DELETE'\n                });\n            });\n    },\n\n    fetchOutputs(params) {\n        return range(0, 20)\n            .delay(x => timer(1000 * pow(2, x)))\n            .flatMap(() => this.describeStacks(params))\n            .flatMap(({Stacks}) => Stacks)\n            .filter(this.isComplete)\n            .take(1);\n    },\n\n    /**\n     * @private\n     * @param {{StackStatus: string}}\n     * @returns {boolean}\n     */\n    isComplete({StackStatus}) {\n        log('StackStatus', StackStatus);\n\n        switch (StackStatus) {\n            case 'CREATE_COMPLETE':\n            case 'DELETE_COMPLETE':\n            case 'ROLLBACK_COMPLETE':\n            case 'UPDATE_COMPLETE':\n            case 'UPDATE_ROLLBACK_COMPLETE':\n                return true;\n\n            case 'CREATE_FAILED':\n            case 'DELETE_FAILED':\n            case 'ROLLBACK_FAILED':\n            case 'UPDATE_ROLLBACK_FAILED':\n                throw new Error();\n\n            case 'CREATE_IN_PROGRESS':\n            case 'DELETE_IN_PROGRESS':\n            case 'ROLLBACK_IN_PROGRESS':\n            case 'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS':\n            case 'UPDATE_IN_PROGRESS':\n            case 'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS':\n            case 'UPDATE_ROLLBACK_IN_PROGRESS':\n            default:\n                return false;\n        }\n    }\n});\n\n\n//-------------------------------------------------------------------------------\n// Private Static Properties\n//-------------------------------------------------------------------------------\n\n/**\n * @static\n * @private\n * @type {GulpCloudformation}\n */\nGulpCloudformation.instance     = null;\n\n\n//-------------------------------------------------------------------------------\n// Static Methods\n//-------------------------------------------------------------------------------\n\n/**\n * @static\n * @return {GulpCloudformation}\n */\nGulpCloudformation.getInstance = function() {\n    if (GulpCloudformation.instance === null) {\n        throw Throwables.exception('MustInit', {}, 'Must call init() on gulp-cloudformation first');\n    }\n    return GulpCloudformation.instance;\n};\n\n/**\n * @static\n * @param {{}} params\n * @return {function()}\n */\nGulpCloudformation.deploy = function(params) {\n    return GulpCloudformation.getInstance().deploy(params);\n};\n\n/**\n * @static\n * @param {*} options\n * @return {function()}\n */\nGulpCloudformation.init = function(options) {\n    GulpCloudformation.instance = new GulpCloudformation(options);\n    return GulpCloudformation.getInstance().validate();\n};\n\n\n//-------------------------------------------------------------------------------\n// Exports\n//-------------------------------------------------------------------------------\n\nexport default GulpCloudformation;\n"]}